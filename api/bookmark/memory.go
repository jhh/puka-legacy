package bookmark // import "jhhgo.us/pukaws/bookmark"

import (
	"bytes"
	"compress/gzip"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"

	"gopkg.in/mgo.v2/bson"

	"github.com/manyminds/api2go"
)

var bookmarksJSON []byte // set in init

// NewMemoryStorage initializes the storage
func NewMemoryStorage() *MemoryStorage {
	var bookmarks []Bookmark
	err := json.Unmarshal(bookmarksJSON, &bookmarks)
	if err != nil {
		log.Fatal(err)
	}
	data := make(map[string]*Bookmark)
	for _, b := range bookmarks {
		b.ID = bson.NewObjectId()
		data[b.GetID()] = &b
	}
	return &MemoryStorage{bookmarks: data}
}

// MemoryStorage stores all users
type MemoryStorage struct {
	bookmarks map[string]*Bookmark
}

// GetAll returns the user map. WARNING: ignores query.
func (s MemoryStorage) GetAll(q Query) ([]Bookmark, error) {
	result := make([]Bookmark, 0, len(s.bookmarks))
	for _, val := range s.bookmarks {
		result = append(result, *val)
	}
	return result, nil
}

// GetPage returns a portion of bookmarks specified by query. WARNING: not implemented
func (s MemoryStorage) GetPage(q Query, skip, limit int) ([]Bookmark, error) {
	return []Bookmark{}, errors.New("not implemented")
}

// Count returns total number of bookmarks. WARNING: ignores query.
func (s MemoryStorage) Count(q Query) (int, error) {
	fmt.Println("LEN", len(s.bookmarks))
	return len(s.bookmarks), nil
}

// GetOne user
func (s MemoryStorage) GetOne(id string) (Bookmark, error) {
	user, ok := s.bookmarks[id]
	if ok {
		return *user, nil
	}
	errMessage := fmt.Sprintf("Bookmark for id %s not found", id)
	return Bookmark{}, api2go.NewHTTPError(errors.New(errMessage), errMessage, http.StatusNotFound)
}

// Insert a user
func (s MemoryStorage) Insert(b *Bookmark) error {
	id := bson.NewObjectId()
	b.ID = id
	s.bookmarks[id.Hex()] = b
	return nil
}

// Delete one :(
func (s MemoryStorage) Delete(id string) error {
	_, exists := s.bookmarks[id]
	if !exists {
		return fmt.Errorf("Bookmark with id %s does not exist", id)
	}
	delete(s.bookmarks, id)

	return nil
}

// Update a user
func (s MemoryStorage) Update(b *Bookmark) error {
	_, exists := s.bookmarks[b.ID.Hex()]
	if !exists {
		return fmt.Errorf("Bookmark with id %s does not exist", b.ID)
	}
	s.bookmarks[b.ID.Hex()] = b

	return nil
}

func init() {
	r, err := gzip.NewReader(bytes.NewReader(bookmarksGzip))
	if err != nil {
		panic(err)
	}
	defer func() {
		if derr := r.Close(); derr != nil {
			panic(derr)
		}
	}()
	bookmarksJSON, err = ioutil.ReadAll(r)
	if err != nil {
		panic(err)
	}
}

var bookmarksGzip = []byte{ // 1339 compressed bytes (3680 uncompressed bytes)
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x96, 0xdb, 0x8e, 0xdb, 0x36,
	0x10, 0x86, 0xef, 0xf3, 0x14, 0x84, 0xd1, 0xcb, 0xd8, 0x3a, 0x38, 0xf6, 0xee, 0xea, 0x39, 0x7c,
	0xd5, 0x20, 0x28, 0x28, 0x69, 0x2c, 0x73, 0x4b, 0x91, 0x0a, 0x0f, 0x6a, 0xb7, 0x41, 0xde, 0xbd,
	0x3f, 0xa9, 0xc3, 0xca, 0x96, 0x17, 0xa8, 0x5b, 0xa0, 0x17, 0x89, 0xc4, 0x35, 0xc5, 0xc3, 0x37,
	0xff, 0xfc, 0x33, 0x5f, 0x7f, 0x6c, 0x7e, 0x13, 0xf5, 0xa6, 0xf8, 0xb1, 0xf9, 0x45, 0x87, 0xe7,
	0xe6, 0xf0, 0x94, 0x1f, 0x8f, 0x87, 0xf2, 0xf9, 0x5c, 0x65, 0x7b, 0x4e, 0xfb, 0x73, 0xb9, 0x4f,
	0xd3, 0x9c, 0xf6, 0xfb, 0xcd, 0xcf, 0xcf, 0x1b, 0x27, 0x9c, 0x24, 0xcc, 0xa9, 0xb5, 0xa2, 0x8a,
	0x79, 0xc7, 0x5a, 0xee, 0x8d, 0xb0, 0x8c, 0x1a, 0x0a, 0xef, 0xd6, 0xf2, 0xcd, 0xe7, 0x4d, 0x4d,
	0xb6, 0x32, 0xa2, 0x73, 0x42, 0x2b, 0x4c, 0xbd, 0xf0, 0x52, 0x38, 0xfc, 0x42, 0xac, 0x93, 0xdc,
	0x11, 0x67, 0xb5, 0xa8, 0x9c, 0x6f, 0xad, 0x63, 0xe4, 0x04, 0x6f, 0xd9, 0x99, 0xfb, 0x4a, 0x94,
	0xde, 0xb2, 0xca, 0x1b, 0x8b, 0x87, 0x37, 0x8a, 0x87, 0x95, 0x1d, 0x49, 0x89, 0xa1, 0xf2, 0x52,
	0xc6, 0x31, 0x19, 0xee, 0x98, 0xa8, 0xa7, 0x1d, 0x7b, 0x2f, 0x3b, 0xef, 0xb0, 0x20, 0x23, 0x49,
	0x2d, 0x29, 0x2c, 0x39, 0xcc, 0x6d, 0x59, 0xcf, 0x8d, 0x98, 0xbf, 0x3c, 0xf3, 0x4a, 0x48, 0x61,
	0xc5, 0x26, 0x1c, 0xbe, 0x25, 0xeb, 0x78, 0xdb, 0xe1, 0x54, 0x79, 0x9a, 0x1d, 0xb6, 0x59, 0xba,
	0x4d, 0x9f, 0x4f, 0x69, 0x5a, 0x1c, 0x8e, 0xc5, 0xfe, 0xf0, 0x2b, 0xa6, 0x78, 0x23, 0xc3, 0x91,
	0x9d, 0xeb, 0x6c, 0x91, 0x24, 0x8d, 0xae, 0x79, 0x5d, 0xbf, 0xed, 0x2a, 0xdd, 0x26, 0xf3, 0x2e,
	0x49, 0x87, 0x83, 0xe1, 0x8d, 0xec, 0x77, 0x4f, 0xc9, 0x77, 0x2f, 0xe2, 0xb3, 0xd3, 0xc6, 0xf1,
	0xa4, 0xd7, 0xd2, 0xbb, 0x8e, 0xbb, 0x24, 0x1c, 0x76, 0xf7, 0x6a, 0xc3, 0xa6, 0xbc, 0xb1, 0x9b,
	0xe2, 0xeb, 0xa6, 0xd1, 0x18, 0xd8, 0x3f, 0xc4, 0xd9, 0xe1, 0xf9, 0xca, 0x7b, 0x3e, 0x30, 0xc2,
	0xa0, 0x7b, 0x73, 0x17, 0x90, 0xfa, 0xf6, 0xf3, 0xf3, 0xa7, 0x7f, 0x18, 0x8a, 0x2f, 0xcb, 0x50,
	0x54, 0x86, 0xe3, 0xae, 0x5a, 0xb1, 0x9e, 0xa4, 0x70, 0x2c, 0xc4, 0x45, 0x0d, 0xf7, 0xbd, 0x8e,
	0x83, 0xc5, 0x8f, 0xbc, 0x45, 0x98, 0x94, 0x57, 0x15, 0xeb, 0x45, 0x4f, 0xc6, 0x20, 0x18, 0xbc,
	0x8b, 0xf0, 0x07, 0x58, 0xe0, 0x5f, 0x89, 0x0e, 0x13, 0xa5, 0x68, 0x3c, 0xc6, 0x42, 0x31, 0xc9,
	0xab, 0x21, 0x36, 0x21, 0x8c, 0xde, 0xb0, 0x10, 0x84, 0xce, 0x02, 0x36, 0xaf, 0xd6, 0x48, 0x8f,
	0xdb, 0x34, 0xdf, 0x66, 0xf9, 0x29, 0x3b, 0x14, 0xe9, 0x73, 0xb1, 0xcf, 0xd7, 0x48, 0xab, 0xb7,
	0x92, 0x4c, 0x75, 0x11, 0x6d, 0x67, 0x23, 0x56, 0x5e, 0x25, 0x35, 0x54, 0x90, 0x84, 0x5b, 0x5c,
	0x93, 0x9d, 0x58, 0xee, 0x2e, 0xae, 0x95, 0x0b, 0x90, 0x23, 0xae, 0xbb, 0x30, 0x1f, 0x60, 0x78,
	0xb8, 0x62, 0xa8, 0x55, 0x2d, 0x46, 0x11, 0xcd, 0x57, 0x5d, 0x11, 0x5c, 0xce, 0x82, 0x10, 0xa5,
	0x87, 0x8e, 0x6d, 0x04, 0xde, 0x6a, 0x09, 0x0c, 0x82, 0x98, 0xa5, 0x9a, 0xbd, 0x7a, 0xeb, 0x34,
	0x5b, 0xde, 0x65, 0xa6, 0xdd, 0x51, 0x4d, 0x00, 0xc7, 0xc2, 0x95, 0x59, 0x0c, 0xdc, 0x72, 0xda,
	0x5d, 0x9e, 0xd9, 0x36, 0x3b, 0x9e, 0xf2, 0xac, 0xc8, 0x9f, 0x8a, 0x2f, 0xcf, 0x6b, 0x9e, 0xa5,
	0xf8, 0xeb, 0x55, 0x87, 0x94, 0x91, 0x03, 0xcf, 0x4e, 0x3b, 0x2c, 0x27, 0xa0, 0xbd, 0xc8, 0x68,
	0x82, 0x66, 0x7c, 0xf9, 0x86, 0x21, 0x44, 0xf8, 0x00, 0xa2, 0xe3, 0x12, 0xd1, 0x28, 0x74, 0x16,
	0x85, 0xbe, 0x42, 0x13, 0xf3, 0xdf, 0x78, 0x67, 0x82, 0x30, 0x20, 0x1f, 0x6d, 0x08, 0x8c, 0x70,
	0xaf, 0x86, 0x0c, 0x73, 0x42, 0x55, 0xa2, 0xf6, 0x0a, 0xfa, 0xc3, 0x5f, 0x82, 0x4e, 0x47, 0x09,
	0x75, 0x86, 0x93, 0xc5, 0x71, 0x59, 0x29, 0x39, 0xd0, 0xba, 0x20, 0x36, 0xa1, 0x04, 0x1f, 0x72,
	0xbd, 0x0f, 0x48, 0x4b, 0x2f, 0x31, 0x31, 0x60, 0x6d, 0x79, 0x03, 0x63, 0xe0, 0xa3, 0x7e, 0x71,
	0xd7, 0x56, 0xd7, 0xfa, 0x6e, 0x56, 0x43, 0x82, 0x87, 0x13, 0xf4, 0x97, 0xed, 0x8b, 0xec, 0xcb,
	0x1d, 0x09, 0xb6, 0x7e, 0x47, 0xb5, 0x4f, 0xc2, 0xf1, 0x4c, 0xed, 0xdb, 0xab, 0x3c, 0x7d, 0x00,
	0xcf, 0xd3, 0x12, 0xcf, 0xac, 0x87, 0x15, 0x9a, 0x5a, 0x83, 0x06, 0x0b, 0xf8, 0x98, 0xae, 0x85,
	0xc6, 0xc9, 0x95, 0xa5, 0xef, 0x3e, 0x5c, 0x70, 0xf0, 0xa9, 0x09, 0x13, 0x74, 0x21, 0xe9, 0x46,
	0x38, 0x5e, 0x3a, 0x23, 0x2a, 0xb2, 0xb8, 0xbd, 0x73, 0xd3, 0x0a, 0x83, 0xf9, 0xf6, 0x70, 0x55,
	0x8a, 0xa9, 0xce, 0x14, 0xd4, 0x34, 0xcf, 0x94, 0x02, 0x19, 0xa6, 0xa3, 0x23, 0x0c, 0x1f, 0xdd,
	0x63, 0x94, 0xbe, 0x6c, 0x53, 0x30, 0xca, 0x8b, 0xf4, 0x50, 0xe4, 0xfb, 0x35, 0x23, 0x77, 0xa1,
	0x46, 0xea, 0x92, 0x10, 0x96, 0x96, 0x0b, 0x19, 0xa5, 0xa5, 0x90, 0x65, 0x84, 0xbc, 0x48, 0x8c,
	0x80, 0x85, 0x23, 0x2e, 0x36, 0x69, 0xf1, 0x2f, 0xba, 0xf8, 0x8e, 0xdb, 0xee, 0xcf, 0x85, 0xde,
	0xfe, 0x5d, 0x4e, 0x3e, 0x2f, 0x89, 0x62, 0xed, 0x90, 0x37, 0x3c, 0x3e, 0x17, 0x52, 0xe0, 0x8d,
	0x18, 0x6f, 0x75, 0xcd, 0xf9, 0x4c, 0xbe, 0x11, 0x3c, 0x54, 0x15, 0xc8, 0x47, 0x5f, 0x7d, 0x03,
	0xb2, 0x18, 0xcc, 0xea, 0x8a, 0xcc, 0x7a, 0x52, 0xa4, 0x78, 0x60, 0x0a, 0x6e, 0x98, 0x19, 0x68,
	0x9f, 0x61, 0x7f, 0x14, 0x02, 0xd4, 0x60, 0x10, 0x73, 0x14, 0x61, 0xd5, 0x48, 0x2e, 0x43, 0x0c,
	0x8e, 0x05, 0xb5, 0x08, 0x72, 0x1f, 0x48, 0x2e, 0x14, 0x92, 0xbc, 0xc8, 0x81, 0xf3, 0xa6, 0x90,
	0x04, 0xc5, 0x91, 0x82, 0xb3, 0xee, 0x1a, 0xdd, 0x27, 0x43, 0x89, 0x4a, 0xb4, 0xa9, 0x44, 0x12,
	0xdc, 0x20, 0x99, 0xcf, 0x91, 0x20, 0x62, 0xbb, 0xd7, 0xae, 0x59, 0x50, 0xbc, 0x5b, 0x2e, 0xc6,
	0x54, 0x7e, 0xbc, 0x6a, 0xbc, 0x2c, 0xe9, 0x2a, 0x0a, 0x17, 0xe6, 0xd8, 0x9c, 0x2b, 0x86, 0x0a,
	0xec, 0xf4, 0xda, 0xef, 0x26, 0x61, 0x46, 0xd7, 0x1a, 0x5c, 0x6d, 0x4e, 0xd0, 0x90, 0xef, 0xef,
	0x79, 0x3d, 0x0c, 0xa9, 0xed, 0x62, 0xac, 0xe4, 0xf0, 0x45, 0xab, 0x4d, 0x29, 0xa2, 0x5f, 0x60,
	0x53, 0xa4, 0xc0, 0x68, 0x0a, 0xf5, 0x54, 0x5c, 0x80, 0xa4, 0x23, 0xa4, 0x3d, 0x5a, 0x83, 0x8f,
	0x98, 0x1e, 0x4f, 0x59, 0x56, 0xa4, 0x4f, 0x45, 0x7a, 0x5c, 0x4b, 0xf4, 0xec, 0xa2, 0x2a, 0x63,
	0xd5, 0x4b, 0xc8, 0x27, 0xf8, 0x3a, 0x19, 0x42, 0xb7, 0xa8, 0xd5, 0xe2, 0x06, 0xe9, 0x03, 0xb8,
	0xf8, 0x4d, 0x81, 0xe8, 0xb9, 0x44, 0x1f, 0x31, 0xde, 0x2a, 0xe4, 0xe1, 0xda, 0x04, 0x3d, 0x9b,
	0x3c, 0x85, 0xe1, 0xfd, 0x1d, 0x4f, 0x28, 0xa3, 0xc8, 0xec, 0x96, 0x13, 0x94, 0x10, 0x4c, 0xdf,
	0xcb, 0x5e, 0x40, 0x55, 0x40, 0x52, 0x02, 0x4f, 0xe8, 0x9f, 0x20, 0xcf, 0xee, 0xc2, 0xed, 0xd0,
	0xf3, 0xcc, 0xa5, 0x3a, 0xfa, 0xe0, 0x50, 0x9a, 0x27, 0xba, 0x63, 0x46, 0x60, 0xc9, 0x33, 0x85,
	0xf3, 0x60, 0x23, 0x8b, 0x1a, 0x4e, 0x6a, 0xea, 0x9f, 0x16, 0xba, 0xef, 0x8c, 0xc6, 0x3c, 0xcc,
	0x68, 0xc5, 0xb0, 0xca, 0x5d, 0x2b, 0x08, 0x7d, 0x50, 0xa8, 0x30, 0xfb, 0x97, 0x22, 0xcb, 0x56,
	0xda, 0x55, 0xe4, 0x7a, 0x38, 0xca, 0x50, 0x5d, 0xa6, 0x3a, 0x97, 0x28, 0x51, 0x5e, 0x6e, 0x6b,
	0xcc, 0x5d, 0xb5, 0x3e, 0x56, 0x71, 0xca, 0x25, 0xf3, 0x60, 0xfa, 0x33, 0xcf, 0x45, 0xba, 0x7a,
	0xd3, 0xdd, 0x4b, 0xff, 0xff, 0xa7, 0x8d, 0x64, 0xeb, 0x76, 0xeb, 0x2e, 0xd4, 0xe3, 0x36, 0xcf,
	0x4e, 0xd9, 0x4b, 0x71, 0x40, 0x0d, 0x4a, 0x57, 0x50, 0x1b, 0xcf, 0xe1, 0x25, 0x5c, 0x01, 0xea,
	0xce, 0xff, 0x9e, 0x84, 0xf4, 0x09, 0xa2, 0x15, 0x67, 0xe4, 0x43, 0x32, 0xd4, 0x91, 0x64, 0x30,
	0x74, 0x41, 0x36, 0x88, 0x3b, 0xf2, 0xbe, 0xf1, 0xd8, 0xb9, 0x11, 0x1a, 0x1d, 0xe1, 0xbf, 0xf5,
	0x43, 0xd5, 0x95, 0xf7, 0x0e, 0xb5, 0xb6, 0xba, 0x5f, 0xe7, 0xdf, 0x99, 0x81, 0xe7, 0x5c, 0x77,
	0x42, 0xde, 0x73, 0x1f, 0x9c, 0x73, 0xe9, 0xbc, 0xa1, 0xe0, 0x4f, 0xc5, 0x5e, 0xb4, 0x62, 0x10,
	0xee, 0x14, 0xaa, 0xe0, 0x82, 0x53, 0x1b, 0x45, 0x8b, 0xa5, 0x3a, 0x6d, 0x3d, 0xc1, 0x73, 0x2b,
	0x5f, 0x02, 0x3a, 0x8f, 0x2d, 0x19, 0x0d, 0x65, 0xef, 0xa3, 0x62, 0x96, 0x9f, 0xf2, 0xb4, 0xc8,
	0x72, 0xd4, 0xfc, 0xb5, 0x53, 0x68, 0x38, 0x37, 0x8f, 0xfa, 0x0d, 0x9e, 0x0e, 0xd9, 0x76, 0xb7,
	0x7d, 0x79, 0x24, 0xf8, 0x00, 0xac, 0x7a, 0x09, 0x6b, 0xca, 0xc3, 0x15, 0xac, 0xfb, 0x95, 0xfc,
	0x3d, 0xcd, 0xa1, 0xc2, 0x31, 0x75, 0x01, 0x65, 0x7a, 0x43, 0xbb, 0x1d, 0x96, 0x1b, 0x8b, 0xd0,
	0x94, 0xee, 0x30, 0x03, 0xfc, 0xcf, 0x4d, 0xe5, 0x19, 0xaf, 0xd1, 0xa1, 0xa3, 0x4d, 0x57, 0xcd,
	0x7b, 0xdb, 0x79, 0x81, 0x6e, 0x0c, 0x99, 0x60, 0x1b, 0xcb, 0xf0, 0xcc, 0x2d, 0x82, 0xfc, 0x28,
	0xf1, 0x8f, 0xb1, 0x07, 0x78, 0x2e, 0xf2, 0x7c, 0xa5, 0x51, 0x04, 0x48, 0x28, 0xb2, 0x50, 0x95,
	0xa1, 0xa9, 0x55, 0x27, 0x25, 0x82, 0xa7, 0x26, 0xc1, 0x8c, 0xb4, 0x49, 0x86, 0x54, 0x84, 0x45,
	0xe0, 0x17, 0xf4, 0x37, 0x68, 0xc8, 0x6e, 0x34, 0xfa, 0xed, 0xe7, 0xb7, 0x4f, 0x7f, 0x07, 0x00,
	0x00, 0xff, 0xff, 0xdb, 0x43, 0x37, 0x19, 0x60, 0x0e, 0x00, 0x00,
}
